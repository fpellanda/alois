
#!/usr/bin/ruby
require 'optparse'
report_directory = "/var/lib/prisma"

send_event = false
sentinel_name = nil
sentinel_id = nil
generate_crontab = false
list_crontab = false
opts = OptionParser.new do |o|
  o.banner = "Usage: alois-sentinel [options]"

  o.on( "-s", "--send", "Send message to ossim-server." ) do |a|
    send_event = true
  end

  o.on( "-s", "--sentinel SENTINEL", "The sentinel name to execute." ) do |a|
    sentinel_name = a
  end   

  o.on( "-i", "--id SENTINEL_ID", "The sentinel id to execute." ) do |a|
    sentinel_id = a
  end   

  o.on( "--list-crontab", "Writes generated crontab file to stdout." ) do |a|
    list_crontab = true
  end

  o.on( "--generate-crontab", "Writes generated crontab file to crontab." ) do |a|
    generate_crontab = true
  end

  o.on("-h", "--help", "This help." ) do
    puts o
    exit
  end
end


begin
  opts.parse!( ARGV )
  
  arg = ARGV[0]
  unless list_crontab or generate_crontab
    throw "Please specify a sentinel by id or name." if not (sentinel_name or sentinel_id)
    throw "Please specify a name or an id for the sentinel." if (sentinel_name and sentinel_id)
  end
rescue => exc
  STDERR.puts "E: #{exc.message}"
  STDERR.puts opts.to_s
  exit 1
end

require 'pathname'
require File.dirname(Pathname.new(__FILE__).realpath) + '/../config/boot'
require File.dirname(Pathname.new(__FILE__).realpath) + '/../config/environment'

if generate_crontab or list_crontab
  # check if script runs as prisma
  require 'etc'
  prisma_uid = Etc::getpwnam('prisma').uid
  
  # use as alois-sentinel --generate_crontab | sudo -u primsa crontab -
  crontab_entry = ""
  crontab_entry += "# /etc/cron.d/alois-prisma: crontab entries for the prisma package\n"
  crontab_entry += "# DO NOT EDIT THIS FILE\n"
  crontab_entry += "# autogenerated by prisma\n"
  crontab_entry += "PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n"
  crontab_entry += "MAILTO=root\n\n"
  
  for sentinel in Sentinel.find(:all, :conditions => "cron_interval IS NOT NULL").select {|s| s.enabled}
    #      throw "Suspicious id found in filter!" unless "#{filter.id}" =~ /\d*/ 
    #      throw "Suspicious interval found in filter!" if not filter.cron_interval =~ "[\d\/]*"
    crontab_entry += "## Sentinel: #{sentinel.name}\n"
    if sentinel.cron_interval =~ Sentinel::CRONTAB_REGEX 
      crontab_entry += "#{sentinel.cron_interval}\t/usr/bin/alois-sentinel --id #{sentinel.id}\n"      
    else	
      crontab_entry += "# INVALID/IGNORED --- #{sentinel.cron_interval}\t/usr/bin/alois-sentinel --id #{sentinel.id}\n\n"
    end
  end
  crontab_entry += "\n# -- END OF FILE\n"

  if generate_crontab
    if Process.euid == prisma_uid then
      Process.uid = prisma_uid
      print "Writing crontab..."
      ct = open("|crontab -","w")
      ct.write(crontab_entry)
      ct.close
      print "DONE\n"
      print "crontab -l:\n"
      exec "crontab -l"
    else
      throw "Not run as user prisma."
    end
  end
  if list_crontab
    print crontab_entry
  end
  
  exit 0
end


sentinel = Sentinel.find(sentinel_id) if sentinel_id
sentinel = Sentinel.find_by_name(sentinel_name) if sentinel_name

if sentinel == nil then
  throw "Sentinel with id '#{sentinel_id}' not found!" if sentinel_id
  throw "Sentinel with name '#{sentinel_name}' not found!" if sentinel_name
end

sentinel.process

exit 0
