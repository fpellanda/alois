#!/usr/bin/ruby
require "libisi"
init_libisi

require 'optparse'
require 'socket'
require "fileutils"
require 'termios'
require 'pathname'
require "alois/config"

update_etc = false
update_db = false
update_ossim = false
print_sql = false
templateroot = "/etc/alois/templates"
require "alois/utils"
myname = hostname

optparse do |o|
  o.on( "-e", "--etc", "Updates passwords in the etc directory." ) {|update_etc|}  
  o.on( "-d", "--db", "Updates passwords in the databases." ) {|update_db|}
  o.on( "-s","--printsql","Print sql queries instead of execute." ) {|print_sql|}
  o.on( "-o", "--ossim", "Updates ossimdatabase configuration." ) {|update_ossim|}
  o.on( "--host HOSTNAME", "The name of the host to configure (this:#{myname})." ) do |hn|
    myname = hn
  end
  
  o.on( "-t", "--templates TEMPLATEROOT", "Template root (default:#{templateroot})." ) do |t|
    templateroot = t
  end
end

raise "No action selected." if not (update_etc || update_db || update_ossim)

initialize_rails

if update_etc then
  configs = read_config()
  replacements = get_replacements()

  root = Pathname.new(templateroot)
  etc = Pathname.new("/etc")
  files = Dir.glob(root.join("**/*"))

  for file in files
    if File.file?(file)
      relfile = Pathname.new(file).relative_path_from(root).to_s
      
      #      root.join(relfile)
      if etc.join(relfile).file?() then
	#  exists on computer so
	# replace the markers and copy file
	$log.info("Replacing file #{etc.join(relfile).to_s}.")

	if not File.file?(etc.join(relfile).to_s + ".alois.bak") then
	  FileUtils.copy(etc.join(relfile).to_s, etc.join(relfile).to_s + ".alois.bak")
	end
	
	oFile = File.new(etc.join(relfile),"w")
	
	aFile = File.new(root.join(relfile))
	aFile.each_line {|line| 
	  str = line
	  for (reg,val) in replacements
	    str = str.gsub(reg.to_s,val.to_s)
	  end
	  print "WARNING: Not replaced:#{str}" if str =~ /\{\{/ or str =~ /\}\}/
	  oFile.print(str)
	}
	oFile.close()
      end
      
    end
  end
end

if update_db then  
   # find all databasekonfigurations for this host
  configs = read_config()
  connect_activerecord_local unless print_sql
  
  usable_configs = configs.select{|name,config| 
    print "#WARNING: Configuraiton #{name} not found.\n" unless config
    print "#WARNING: Configuration #{name} has unusable adapter '#{config["adapter"]}.\n" unless config["adapter"] == "mysql"
    print "#WARNING: Configuration #{name} has no hosts defined.\n" unless config["hosts"]
    config and config["host"] == myname and config["adapter"] == "mysql" and config["hosts"]
  }


  for (name,config) in usable_configs
    # delete permissions and redefine it.
    print "#Delete all permissions for #{config['username']} in database #{config['database']}.\n"
    raise "DO NOT USE root TO CONNECT!!" if config["username"]=="root"
    
    cmd = "REVOKE ALL PRIVILEGES ON *.* FROM #{config['username']};"    
    begin
      print "#{cmd}\n"
      ActiveRecord::Base.connection.execute(cmd) unless print_sql
     rescue
      raise if not $!.to_s =~ /There is no such grant/
    end
  end
  
  
  done_one = false
  users = {}
  for (name,config) in usable_configs
    done_one = true
    # if the configurationdatabase is on this host
    print "#Processing configuration #{name}.\n"
    raise "password may not contain '" if (config["password"] =~ /\'/)
    
    for host in config['hosts']
      print "#Setting new permissions (#{config['rights']}) for host: #{host}.\n"
      
      if not users["#{config['username']}@#{host}"].nil? and not users["#{config['username']}@#{host}"] == config['password'] then
	print "#\n" if not done_one
	print "##############################################\n" 
	print "#       TWO DIFFERENT PASSWORDS FOR USER     #\n"  
	print "# #{config['username']}@#{host} in #{myname}.\n"
	print "#       ONLY SECOND WILL TAKE AFFECT!!!      #\n"  
	print "##############################################\n" 
	print "#\n" if not done_one
      end
      
      users["#{config['username']}@#{host}"] = config['password']

      for table in config['tables']
	cmd = "GRANT #{config['rights']} ON #{config['database']}.#{table} TO "
	cmd += "'#{config['username']}'@'#{host}' IDENTIFIED BY '#{config['password']}'"
	print cmd + "\n" #if print_sql
	
	begin
	  ActiveRecord::Base.connection.execute(cmd) if not print_sql
	rescue
	  print $!.to_s
	end
      end
    end      
  end
  print "#\n" if not done_one
  print "##############################################\n" if not done_one
  print "#NO DB DEFINED FOR HOST #{myname}.\n" if not done_one
  print "##############################################\n" if not done_one
end

if update_ossim then
  configs = read_config()

  ossim_config = configs["ossim"]
  raise "ossim connection not found in #{}." if ossim_config == nil 
  ossim_db_config = configs["ossim_database_configuration"]
  raise "ossim_database_configuration not found." if ossim_db_config == nil 

  ActiveRecord::Base.establish_connection({
					    :adapter => ossim_config["adapter"],
					    :database => ossim_config["database"],
					    :host => ossim_config["host"],
					    :username => ossim_config["username"],
					    :password => ossim_config["password"],
					    :port => ossim_config["port"],
					  }) 
  
  for (config, value) in ossim_db_config
    OssimConfig::set_value(config, value)
  end

end
